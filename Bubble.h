//
// Created by lucas on 11/29/2020.
//

#ifndef A8_BUBBLE_H
#define A8_BUBBLE_H

#include "SFML\Graphics.hpp"
#include <iostream>
#include <cmath>

using namespace std;
using namespace sf;

class Bubble {
public:
    /** @brief creates a default bubble
    * @desc Creates a default bubble with a radius of 10, color white, position of (320, 320), _xDir of 0.1,
    * _yDir of 0.2, mass of 10, and an ID of -9999.
    */
    Bubble();

    /** @brief initializes the bubble
    * @desc initializes the member variables of the callee bubble. Uses rand values for almost everything other than
    * origin and outlinethickness.
    */
    void setBubbleCircle();

    /** @brief reflect x dir
    * @desc flips the x dir from + to - or - to +, called when a collision with wall or bubble happens
    */
    void setXDir();

    /** @brief reflect y dir
    * @desc flips the y dir from + to - or - to +, called when a collision with wall or bubble happens
    */
    void setYDir();

    /** @brief get circleshape
    * @desc returns the circleshape of the callee bubble
    * @return circleshape bubble
    */
    CircleShape getBubbleCircle() const;

    /** @brief set bubble pos
    * @desc sets the bubble generated by user click @ the location of the click
    * @param user event mouse click
    */
    void setPosition(Event);

    /** @brief get xDir
    * @desc returns the xVelocity of the bubble
    * @return double x velocity
    */
    double getXDir() const;

    /** @brief get yDir
    * @desc returns the yVelocity of the bubble
    * @return double y velocity
    */
    double getYDir() const;

    /** @brief check for collision
    * @desc check for collision (used in initial creation of the 5 original bubbles)
    * @param vector<bubble> vector of bubbles
    * @return bool is valid location or not
    */
    bool checkForCollision(const vector<Bubble> &myBubbles);

    /** @brief set velocities
    * @desc sets the velocities of the callee bubble, this is called after a bubble on bubble collision
    * @param float new x velocity
    * @param float new y velocity
    */
    void setSpeedCollision(float, float);

    /** @brief get mass
    * @desc returns the mass of the callee bubble
    * @return double mass
    */
    double getMass() const;

    /** @brief check wall bounds
    * @desc checks to see if the bubble will hit the wall or not. If it does, reflect xDir/yDir (whichever dir is
    * relevant to collision)
    */
    void checkBounds();

    /** @brief get ID
    * @desc returns the ID of the callee bubble
    * @return int ID
    */
    int getID() const;

    /** @brief move bubble
    * @desc moves bubble's circleshape according to its velocities
    */
    void moveBubble();

    /** @brief updates position
    * @desc updates position of bubbles, checks for collisions, if there is a collision, changes velocity of the two
    * colliding bubbles with an elastic collision
    * @param Vector<Bubble> vector of bubbles
    */
    void updatePosition(vector<Bubble> &); // updatePosition(): which should add the direction values to the position of the CircleShape
private:
    CircleShape _bubbleCircle; //a CircleShape which will be used to draw the Bubble
    //two doubles to store the X and Y direction respectively the Bubble should move (call them xDir and yDir)
    //double _xDir;
    //double _yDir;
    float _xDir;
    float _yDir;
    double _mass;
    int _bubbleID;
};


#endif //A8_BUBBLE_H
